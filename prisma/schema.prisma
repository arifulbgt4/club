generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DB_PRISMA_URL")
  directUrl = env("DB_URL_NON_POOLING")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String?         @unique
  picture       String?
  available     Boolean?        @default(true)
  active        Boolean?        @default(true)
  bio           String?
  skills        String[]
  githubId      String?         @unique
  username      String?         @unique
  inactive      Boolean?        @default(false)
  sessions      Session[]
  repository    Repository[]
  request       Request[]
  issue         Issue[]
  stripeAccount StripeAccount[]
  provider      Provider[]
  reviewer      Intent[]
  account       Account?
  collaborate   Collaborate[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id               String   @id @default(cuid())
  user             User     @relation(fields: [userId], references: [id])
  userId           String   @unique
  accessToken      String?
  refreshToken     String?
  stripeCustomerId String?  @unique @map("stripe_customer_id")
  balance          Float?   @default(0.0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@index([userId])
}

model StripeAccount {
  id                   String   @id @default(cuid())
  stripeUserId         String   @unique // Unique identifier for the Stripe account
  accessToken          String // Access token for making API requests
  scope                String // Scope granted to the access token
  livemode             Boolean // Indicates if the token is for live mode (production) or test mode
  tokenType            String // Type of token ('bearer' in this case)
  refreshToken         String? // Refresh token for obtaining a new access token
  stripePublishableKey String // Publishable key associated with the Stripe account
  user                 User?    @relation(fields: [userId], references: [id])
  userId               String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
}

enum OwnerTypeState {
  user
  organization
}

model Provider {
  id             String          @id @default(cuid())
  name           String?         @unique
  installationId Int?            @unique
  active         Boolean?        @default(true)
  picture        String?
  accessToken    String?
  userId         String?
  ownerType      OwnerTypeState? @default(user)
  user           User?           @relation(fields: [userId], references: [id])
  repository     Repository[]

  @@index([userId])
}

model Repository {
  id          String        @id @unique
  name        String?
  fullName    String?
  language    String?
  private     Boolean?
  active      Boolean?      @default(true)
  topics      String[]
  user        User?         @relation(fields: [userId], references: [id])
  userId      String?
  issue       Issue[]
  provider    Provider?     @relation(fields: [providerId], references: [id])
  providerId  String?
  collaborate Collaborate[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@index([userId, providerId])
}

model Collaborate {
  id           String      @id @default(cuid())
  repository   Repository? @relation(fields: [repositoryId], references: [id])
  repositoryId String?
  active       Boolean     @default(true)
  accept       Boolean     @default(false)
  user         User?       @relation(fields: [userId], references: [id])
  userId       String?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@index([repositoryId, userId])
}

enum IssueState {
  published
  inprogress
  reassign
  inreview
  draft
  inactive
}

enum IssueType {
  free
  paid
}

enum IssueStatus {
  default
  queue
}

model Issue {
  id           String       @id @unique
  title        String?
  issueNumber  Int?
  topics       String[]
  status       IssueStatus? @default(default)
  active       Boolean?     @default(true)
  state        IssueState   @default(draft)
  repository   Repository?  @relation(fields: [repositoryId], references: [id])
  repositoryId String?
  user         User?        @relation(fields: [userId], references: [id])
  userId       String?
  request      Request[]
  intent       Intent[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([repositoryId, userId])
}

model Request {
  id        String   @id @default(cuid())
  days      Int?
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  issue     Issue?   @relation(fields: [issueId], references: [id])
  issueId   String?
  intent    Intent?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId, issueId])
}

enum IntentType {
  open_source
  paid
}

model Intent {
  id         String      @id @default(cuid())
  price      Float?
  type       IntentType?
  reviewer   User?       @relation(fields: [reviewerId], references: [id])
  reviewerId String?
  pr_number  Int?
  success    Boolean?    @default(true)
  active     Boolean?    @default(true)
  issue      Issue?      @relation(fields: [issueId], references: [id])
  issueId    String?
  request    Request?    @relation(fields: [requestId], references: [id])
  requestId  String?     @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([issueId, requestId, reviewerId])
}
