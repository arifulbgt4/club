generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DB_PRISMA_URL")
  directUrl = env("DB_URL_NON_POOLING")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  email     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                   @id @unique @default(cuid())
  name                    String?
  email                   String?                  @unique
  emailVerified           Boolean?                 @default(false)
  picture                 String?
  accessToken             String?
  installId               Int?
  activate                Boolean?                 @default(true)
  githubId                Int?                     @unique
  username                String?                  @unique
  stripeCustomerId        String?                  @unique @map("stripe_customer_id")
  stripeSubscriptionId    String?                  @unique @map("stripe_subscription_id")
  stripePriceId           String?                  @map("stripe_price_id")
  stripeCurrentPeriodEnd  DateTime?                @map("stripe_current_period_end")
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  emailVerificationTokens EmailVerificationToken[]
  organizations           Organization[]
  projects                Project[]
  sessions                Session[]
  Repository              Repository[]
  Issue                   Issue[]
}

model Organization {
  id         String       @id @unique @default(cuid())
  name       String
  installId  Int?
  active     Boolean?     @default(true)
  picture    String?
  token      String?
  userId     String?
  user       User?        @relation(fields: [userId], references: [id])
  projects   Project[]
  Repository Repository[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Repository {
  id        String        @id @unique @default(cuid())
  name      String?
  fullName  String?
  language  String?
  private   Boolean?
  topics    String[]
  user      User?         @relation(fields: [userId], references: [id])
  userId    String?
  org       Organization? @relation(fields: [orgId], references: [id])
  orgId     String?
  Issue     Issue[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model Issue {
  id          BigInt      @unique
  issueNumber Int?
  state       String?
  published   Boolean?    @default(true)
  repo        Repository? @relation(fields: [repoId], references: [id])
  repoId      String?
  user        User?       @relation(fields: [userId], references: [id])
  userId      String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Project {
  id             String        @id @default(cuid())
  name           String
  domain         String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
}
