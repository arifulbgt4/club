generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DB_PRISMA_URL")
  directUrl = env("DB_URL_NON_POOLING")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model EmailVerificationToken {
  id        String   @id @default(cuid())
  userId    String
  email     String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id                      String                   @id @unique @default(cuid())
  name                    String?
  email                   String?                  @unique
  emailVerified           Boolean?                 @default(false)
  picture                 String?
  accessToken             String?
  refreshToken            String?
  installId               Int?
  available               Boolean?                 @default(true)
  active                  Boolean?                 @default(true)
  githubId                Int?                     @unique
  username                String?                  @unique
  stripeCustomerId        String?                  @unique @map("stripe_customer_id")
  stripeAccountId         String?                  @unique @map("stripe_account_id")
  stripeSubscriptionId    String?                  @unique @map("stripe_subscription_id")
  stripePriceId           String?                  @map("stripe_price_id")
  stripeCurrentPeriodEnd  DateTime?                @map("stripe_current_period_end")
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  emailVerificationTokens EmailVerificationToken[]
  organizations           Organization[]
  sessions                Session[]
  repository              Repository[]
  request                 Request[]
  assignedIssues          Issue[]                  @relation("AssignedIssues")
  issue                   Issue[]
  stripeAccount           StripeAccount[]
  provider                Provider[]
  reviewer                Intent[]
}

model StripeAccount {
  id                   String   @id @unique @default(cuid())
  stripeUserId         String   @unique // Unique identifier for the Stripe account
  accessToken          String // Access token for making API requests
  scope                String // Scope granted to the access token
  livemode             Boolean // Indicates if the token is for live mode (production) or test mode
  tokenType            String // Type of token ('bearer' in this case)
  refreshToken         String? // Refresh token for obtaining a new access token
  stripePublishableKey String // Publishable key associated with the Stripe account
  user                 User?    @relation(fields: [userId], references: [id])
  userId               String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  @@index([userId])
}

model Organization {
  id         String       @id @unique @default(cuid())
  name       String
  installId  Int?
  active     Boolean?     @default(true)
  picture    String?
  token      String?
  userId     String?
  user       User?        @relation(fields: [userId], references: [id])
  repository Repository[]
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt

  @@index([userId])
}

enum OwnerTypeState {
  user
  organization
}

model Provider {
  id             String          @id @unique
  name           String?
  installationId Int?
  active         Boolean?        @default(true)
  picture        String?
  accessToken    String?
  userId         String?
  ownerType      OwnerTypeState? @default(user)
  user           User?           @relation(fields: [userId], references: [id])
  repository     Repository[]

  @@index([userId])
}

model Repository {
  id             String        @id @unique
  name           String?
  fullName       String?
  language       String?
  private        Boolean?
  active         Boolean?      @default(true)
  topics         String[]
  user           User?         @relation(fields: [userId], references: [id])
  userId         String?
  issue          Issue[]
  provider       Provider?     @relation(fields: [providerId], references: [id])
  providerId     String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])
  organizationId String?
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt

  @@index([userId, providerId])
}

enum IssueState {
  published
  inprogress
  reassign
  inreview
  done
  draft
  inactive
}

enum IssueType {
  free
  paid
}

enum IssueStatus {
  default
  queue
}

model Issue {
  id           String       @id @unique
  title        String?
  issueNumber  Int?
  prNumber     Int?
  topics       String[]
  status       IssueStatus? @default(default)
  active       Boolean?     @default(true)
  type         IssueType?
  state        IssueState   @default(draft)
  published    Boolean?     @default(false)
  price        Float?
  repository   Repository?  @relation(fields: [repositoryId], references: [id])
  repositoryId String?
  user         User?        @relation(fields: [userId], references: [id])
  userId       String?
  assigned     User?        @relation("AssignedIssues", fields: [assignedId], references: [id])
  assignedId   String?
  request      Request[]
  intent       Intent[]
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt

  @@index([repositoryId, userId, assignedId])
}

enum RequestState {
  open
  inprogress
  reassign
  inreview
  done
  failed
}

enum RequestStatus {
  default
  queue
}

model Request {
  id        String         @id @unique @default(cuid())
  days      Int?
  approved  Boolean?       @default(false)
  state     RequestState?  @default(open)
  status    RequestStatus? @default(default)
  user      User?          @relation(fields: [userId], references: [id])
  userId    String?
  issue     Issue?         @relation(fields: [issueId], references: [id])
  issueId   String?
  intent    Intent?
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  @@index([userId, issueId])
}

enum IntentType {
  open_source
  paid
}

model Intent {
  id         String      @id @unique @default(cuid())
  price      Float?
  type       IntentType?
  reviewer   User?       @relation(fields: [reviewerId], references: [id])
  reviewerId String?
  pr_number  Int?
  success    Boolean?    @default(true)
  active     Boolean?    @default(true)
  issue      Issue?      @relation(fields: [issueId], references: [id])
  issueId    String?
  request    Request?    @relation(fields: [requestId], references: [id])
  requestId  String?     @unique
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}
